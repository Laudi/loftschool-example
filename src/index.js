/* ДЗ 2 - работа с массивами и объектами */

/*
 Задание 1:

 Напишите аналог встроенного метода forEach для работы с массивами
 Посмотрите как работает forEach и повторите это поведение для массива, который будет передан в параметре array
используется для трансформации массива.
Он для каждого элемента массива вызывает функцию callback.
Этой функции он передаёт три параметра callback(item, i, arr):
item – очередной элемент массива.
i – его номер.
arr – массив, который перебирается.
 */
function forEach(array, fn) {
	for (var i = 0; i < array.lenght; i++) { // для каждого элемента массива вызывает функцию callback.
		fn (array[i], i, array);  //Этой функции он передаёт три параметра callback(item, i, arr):(у нас - array)
	}
}

/*
 Задание 2:

 Напишите аналог встроенного метода map для работы с массивами
 Посмотрите как работает map и повторите это поведение для массива, который будет передан в параметре array

map используется для трансформации массива.
Он создаёт новый массив, который будет состоять из результатов вызова callback(item, i, arr) для каждого элемента arr.
 */
function map(array, fn) {
	result = [];  // создает новый массив
	for (i = 0; i < array.length; i++) {
    result.push(fn.call(array[i], i, array)); //из результатов вызова callback(item, i, arr) для каждого элемента arr.
  }
  return result;

}

/*
 Задание 3:

 Напишите аналог встроенного метода reduce для работы с массивами
 Посмотрите как работает reduce и повторите это поведение для массива, который будет передан в параметре array

 используется для последовательной обработки каждого элемента массива с сохранением промежуточного результата.
 Метод reduce используется для вычисления на основе массива какого-либо единого значения, иначе говорят «для свёртки массива». 

Он применяет функцию callback по очереди к каждому элементу массива слева направо, сохраняя при этом промежуточный результат.
Аргументы функции callback(previousValue, currentItem, index, arr):
previousValue – последний результат вызова функции, он же «промежуточный результат».
currentItem – текущий элемент массива, элементы перебираются по очереди слева-направо.
index – номер текущего элемента.
arr – обрабатываемый массив. (array)
Кроме callback, методу можно передать «начальное значение» – аргумент initialValue. (initial)
Если он есть, то на первом вызове значение previousValue будет равно initialValue, а если у reduce нет второго аргумента,
 то оно равно первому элементу массива, а перебор начинается со второго.
 */
function reduce(array, fn, initial) {
  result = initial || array [0];  // создает новый массив
  var i = initial ? 0 : 1;
	for (; i < array.length; i++) {
	 result = fn (result, array[i], i, array);
	}
	return result;
}

/*
 Задание 4:

 Функция должна перебрать все свойства объекта, преобразовать их имена в верхний регистр и вернуть в виде массива

 Пример:
   upperProps({ name: 'Сергей', lastName: 'Петров' }) вернет ['NAME', 'LASTNAME']
 */
function upperProps(obj) {
	for(var propName in obj) {
		return propName.toUpperCase();
	}
}

/*
 Задание 5 *:

 Напишите аналог встроенного метода slice для работы с массивами
 Посмотрите как работает slice и повторите это поведение для массива, который будет передан в параметре array
 */
function slice(array, from, to) {
}

/*
 Задание 6 *:

 Функция принимает объект и должна вернуть Proxy для этого объекта
 Proxy должен перехватывать все попытки записи значений свойств и возводить это значение в квадрат
 */
function createProxy(obj) {
}

export {
    forEach,
    map,
    reduce,
    upperProps,
    slice,
    createProxy
};
